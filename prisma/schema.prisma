// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["referentialActions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  uuid String @id
  email String @unique
  nickname String
  pass String
  salt String
  tel String @default("000-0000-0000")
  wallet wallet? @relation("UserWallet")
  gifts gift[] @relation("Gift")
  coupons Json[]
  orderhistory Json[]
  accesstoken String?
  refreshtoken String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model wallet {
  uuid String @id
  point Int @default(0)
  stars Int @default(0)
  user user @relation("UserWallet", references: [uuid], fields: [user_uid], onDelete: Cascade)
  user_uid String @unique
}

model gift {
  uuid String @id
  message String
  coupon Json
  to String
  from String
  menu Json
  imp_uid String
  order_uid String
  wrappingtype String @default("default")
  user user @relation("Gift", references: [email], fields: [user_email], onDelete: Cascade)
  user_email String
}

model coupon {
  code String @unique
  menuinfo Json
  expirationperiod DateTime
}

model order {
  uuid String @id
  imp_uid String
  saleprice Int @default(0)
  totalprice Int @default(0)
  deliveryinfo Json
  store_uid String
  menus Json[]
}

model merchant {
  uuid String @id
  pass String
  salt String
  store store? @relation("Store")
}

model store {
  uuid String @id
  imp_uid String
  storename String
  thumbnail String?
  location Json
  address String
  merchant merchant @relation("Store", references: [uuid], fields: [owner_uid], onDelete: Cascade)
  owner_uid String @unique
  wallet storewallet? @relation("StoreWallet")
  detail storedetail? @relation("StoreDetail")
}

model storedetail {
  id Int @id @default(autoincrement())
  description String?
  images String[]
  openhours Json?
  sirenorderhours Json?
  phonenumber String
  parkinginfo String
  waytocome String
  store store @relation("StoreDetail", fields: [store_uid], references: [uuid], onDelete: Cascade)
  store_uid String @unique
}

// openhoures = { ...weekdays: 'open time ~ close time' }
// sirenorderhours = { sirenorder, dt } dt is Drive through

model storewallet {
  uuid String @id
  store store @relation("StoreWallet", fields: [store_uid], references: [uuid], onDelete: Cascade)
  store_uid String @unique
  sales sales[] @relation("Sales")
}

model sales {
  id Int @id @default(autoincrement())
  amounts Int @default(0)
  menus Json[]
  salesdate DateTime @default(now())
  currwallet storewallet @relation("Sales", references: [uuid], fields: [wallet_uid], onDelete: Cascade)
  wallet_uid String @unique
}

model menu {
  id Int @id @default(autoincrement())
  name String
  en_name String
  thumbnail String
  category String @default("notdefined")
  detail menudetail? @relation("MenuDetail")
}

model menudetail {
  id Int @id @default(autoincrement())
  price Int @default(0)
  description String?
  allergys String[]
  menu menu @relation("MenuDetail", fields: [menu_id], references: [id], onDelete: Cascade)
  menu_id Int @unique
  nutritions nutrition[] @relation("Nutrition")
}

model nutrition {
  id Int @id @default(autoincrement())
  size String
  volume String
  calorie Decimal @default(0.0)
  carbohydrate Decimal @default(0.0)
  sugars Decimal @default(0.0)
  salt Decimal @default(0.0)
  protein Decimal @default(0.0)
  fat Decimal @default(0.0)
  cholesterol Decimal @default(0.0)
  transfat Decimal @default(0.0)
  saturatedfat Decimal @default(0.0)
  caffeine Decimal @default(0.0)
  currdetail menudetail @relation("Nutrition", references: [id], fields: [detail_id], onDelete: Cascade)
  detail_id Int
}